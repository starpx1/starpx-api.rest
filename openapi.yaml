openapi: 3.0.0
info:
  title: StarPx API
  version: 0.1.0
  description: |
    API for StarPx service, providing authentication and access token generation.

    ## Resources

    * [Official github API](https://github.com/starpx1/starpx-api.rest "Official github API")
    * [Official doc rendered](https://starpx1.github.io/starpx-api.rest "Official doc rendered")
servers:
  - url: https://api.starpx.com/v1
paths:
  /authenticate:
    post:
      summary: Authenticate with a long-lived API key to receive a short-lived access token
      description: |
        Use this endpoint to authenticate with the starpx backend using your unique
        long-lived API key which you can find in your user profile in the app or website.
        When authorized, it will return an access token which must be included in all
        subsequent API calls (excluding this one).

        Each subsequent API call must contain the HTTP request header:
        "Authorization: Bearer \<access token\>"
      parameters:
        - name: api_key
          in: header
          required: true
          schema:
            type: string
          description: The user's long-lived API key
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_version:
                    type: string
                    example: "0.1.0"
                  access_token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  expiry_time:
                    type: integer
                    example: 57600  # 16 hours in seconds
        '401':
          description: Unauthorized - Invalid API key
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized - API key is invalid"
  /imagingsession/start:
    post:
      summary: Create a new live imaging session
      description: |
        When you start imaging a new object you can call this method. It will
        create a new live imaging session in the backend. This allows you to upload
        your RAW files as you capture them. In addition, you can request a live preview
        to see how the image is progressing! When you finished collecting the RAW files
        you simply call the `finish` method and the final stack will be immediately
        processed into a final image.

        You should only upload Light frames (of any filter type or bayered). As
        with all of starpx, calibration frames are unnecessary and discouraged
        since these take away valuable imaging time without significantly improving
        the final image. Essentially, uploaded calibration frames are simply ignored
        by starpx and can be completely eliminated from your imaging workflow.

        You can freely mix any filter types in the upload and you do not need
        to specify which filter a certain RAW frame is, starpx will figure this out.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewImagingSession'
      responses:
        '201':
          description: Imaging session created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  imaging_session_id:
                    type: string
                    example: "abc123"
        '400':
          description: Bad request - Missing or invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_message:
                    type: string
                    example: "Targetname is required"
        '401':
          description: Unauthorized - Invalid or missing access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized - Invalid or missing access token"
  /imagingsession/list:
    get:
      summary: Get a list of active and past imaging sessions
      description: |
        Retrieve a list of active and finished imaging sessions. Finished (or stale)
        imaging sessions will be stored for 30 days. The imaging session can remain
        active for up to this period. After this period has elapsed the imaging session
        will be closed and the images in this session (if any) will be processed and
        added to your gallery. 
        Imaging sessions that are marked finished are included for reference only and
        cannot be reopened again. 
      security:
        - BearerAuth: []
      responses:
        '201':
          description: List returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NewImagingSession'
        '401':
          description: Unauthorized - Invalid or missing access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized - Invalid or missing access token"
  /imagingsession/fileupload/start/{session_id}:
    post:
      summary: Get upload URLs for a new RAW file for the imaging session
      description: |
        Use this endpoint to request an upload URL for a freshly captured RAW file.
        
        When successfull, proceed to upload the file by performing a POST to the returned
        `upload_url` with the binary file contents as the POST body.
        
        A successfull upload is indicated by a 200 return code from the POST to the
        `upload_url`. The client must explicitly notify it is done with the file by
        calling `/imagingsession/fileupload/finish/{file_id}` using the `file_id` returned
        in this call.
        
      security:
        - BearerAuth: []
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the imaging session        
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
      responses:
        '200':
          description: Upload URLs retrieved successfully
          content:
            application/json:
              schema:
                properties:
                  upload_url:
                    type: string
                    example: "https://upload-us13.starpx.com/upload/weeaffwe41"
                  file_id:
                    type: string
                    example: "RHiozIpAP4R8fD"
        '400':
          description: Bad request - Invalid session ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_message:
                    type: string
                    example: "Invalid session ID"
        '401':
          description: Unauthorized - Invalid or missing access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized - Invalid or missing access token"
  /imagingsession/fileupload/finish/{file_id}:
    post:
      summary: Mark an file as finished uploading. 
      description: |
        Use this to mark a file as finished uploading.
        
        The client must only call this after the file upload has not encountered
        any errors. This will instruct starpx that it can use this file in
        updating the live view. 
      security:
        - BearerAuth: []
      parameters:
        - name: file_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the imaging session
      responses:
        '200':
          description: Call returned succesfully
        '400':
          description: Bad request - Invalid file ID or file already marked as finished
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_message:
                    type: string
                    example: "Invalid session ID"
        '401':
          description: Unauthorized - Invalid or missing access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized - Invalid or missing access token"
  /imagingsession/preview/{session_id}:
    get:
      summary: Get live preview of the imaging session
      description: |
        Request the most up-to-date live pre-view (live stacking) of the imaging session.
        Typically, a few seconds after uploading a RAW file, the updated preview is ready.
      security:
        - BearerAuth: []
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the imaging session
      responses:
        '200':
          description: Live preview details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  seq:
                    type: integer
                    example: 13
                    description: The sequence number of this preview
                  preview_url:
                    type: string
                    example: "https://upload-us13.starpx.com/preview/weeaffwe41/14.jpg"
                    description: The URL of the preview image
                  starless_url:
                    type: string
                    example: "https://upload-us13.starpx.com/preview/weeaffwe41/15.jpg"
                    description: The URL of the preview image
        '400':
          description: Bad request - Invalid session ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_message:
                    type: string
                    example: "Invalid session ID"
        '401':
          description: Unauthorized - Invalid or missing access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized - Invalid or missing access token"
  /imagingsession/abort/{session_id}:
    post:
      summary: Aborts the imaging session
      description: |
        Call this endpoint to inidicate you are aborting this imaging session.

        No image will be computed and put in your gallery. This is usefull if
        something went wrong during capture and you don't want to consume
        space or compute tokens with bad images.
      security:
        - BearerAuth: []
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the imaging session
      responses:
        '200':
          description: Imaging session aborted successfully
        '400':
          description: Bad request - Invalid session ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_message:
                    type: string
                    example: "Invalid session ID"
        '401':
          description: Unauthorized - Invalid or missing access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized - Invalid or missing access token"                    
  /imagingsession/finish/{session_id}:
    post:
      summary: Finish the imaging session and get the gallery link
      description: |
        Call this endpoint to inidicate you are finished with this imaging session.

        After a short while your processed image will appear in your gallery.
      security:
        - BearerAuth: []
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the imaging session
      responses:
        '200':
          description: Imaging session finished successfully
        '400':
          description: Bad request - Invalid session ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_message:
                    type: string
                    example: "Invalid session ID"
        '401':
          description: Unauthorized - Invalid or missing access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized - Invalid or missing access token"  
  /platesolve:
    post:
      summary: Perform a plate solve operation
      description: |
        Call this to quickly platesolve an image.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlateSolveRequest'
      responses:
        '200':
          description: Plate solve operation performed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlateSolveResult'
        '400':
          description: Bad request - Missing or invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorMessage:
                    type: string
                    example: "Invalid sky coordinates"
        '401':
          description: Unauthorized - Invalid or missing access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized - Invalid or missing access token"
  /platesolve/{platesolve_id}:
    get:
      summary: Retrieve plate solve results using platesolve ID
      security:
        - BearerAuth: []
      parameters:
        - name: platesolve_id
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier for the plate solve request
      responses:
        '200':
          description: Plate solve results retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlateSolveResult'
        '400':
          description: Bad request - Invalid platesolve ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_message:
                    type: string
                    example: "Invalid platesolve ID"
        '401':
          description: Unauthorized - Invalid or missing access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized - Invalid or missing access token"

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: apiKey
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AuthenticationResponse:
      type: object
      properties:
        api_version:
          type: string
          example: "0.1.0"
        access_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        expiry_time:
          type: integer
          example: 57600  # 16 hours in seconds
    NewImagingSession:
      type: object
      properties:
        local_time:
          type: string
          format: date-time
          example: "2024-05-27T10:00:00Z"
          nullable: true
        geolocation:
          type: object
          properties:
            lat:
              type: number
              format: float
              example: 34.0522
              nullable: false
            lon:
              type: number
              format: float
              example: -118.2437
              nullable: false
          nullable: false
        targetname:
          type: string
          example: "Mars"
          nullable: false
        skycoordinates:
          type: object
          properties:
            ra:
              type: number
              format: float
              example: 14.660
              nullable: false
            dec:
              type: number
              format: float
              example: -60.835
              nullable: false
          nullable: false
    ImagingSessionResponse:
      type: object
      properties:
        error_message:
          type: string
          example: "Targetname is required"
        imaging_session_id:
          type: string
          example: "abc123"
    PlateSolveRequest:
      type: object
      properties:
        sky_coordinate:
          type: object
          properties:
            ra:
              type: number
              format: double
              description: Right Ascension in degrees (J2000.0)
              example: 180.0
            dec:
              type: number
              format: double
              description: Declination in degrees (J2000.0)
              example: 45.0
        radius:
          type: number
          format: double
          description: Expected distance from location in degrees
          example: 1.0
        source_list:
          type: array
          items:
            type: object
            properties:
              x:
                type: number
                format: double
                description: X centroid pixel coordinate
                example: 256.0
              y:
                type: number
                format: double
                description: Y centroid pixel coordinate
                example: 256.0
              flux:
                type: number
                format: double
                description: Isophotal flux / brightness (linear)
                example: 1500.0
              background:
                type: number
                format: double
                description: Background estimate
                example: 100.0
        clip_list:
          type: array
          items:
            type: object
            properties:
              width:
                type: integer
                description: Width of the image clip in pixels
                example: 64
              height:
                type: integer
                description: Height of the image clip in pixels
                example: 64
              image_clip:
                type: string
                format: byte
                description: Compressed image clip (base64 encoded)
                example: "eJzT0yMAAGTvBe8="
    PlateSolveResult:
      type: object
      properties:
        platesolve_id:
          type: string
          description: Unique identifier for the plate solve request
          example: "platesolve123"
        solved:
          type: boolean
          description: Indicates if the image is solved
          example: true
        sky_coordinate:
          type: object
          properties:
            ra:
              type: number
              format: double
              description: Right Ascension of the image center
              example: 180.1
            dec:
              type: number
              format: double
    FileUploadRequest:
      type: object
      properties:
        path:
          type: string
          description: Local path of the file
          example: "C:\\Imaging\\M33_light_300s.fit"
        compression:
          type: string
          description: Indicates compression scheme used (if any)
          example: "zip"
        size:
          type: number
          description: Size of the file in bytes
          example: 16777216
security:
  - BearerAuth: []
